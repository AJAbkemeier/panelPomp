% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/panelPomp-methods.R
\docType{methods}
\name{pfilter,panelPomp-method}
\alias{pfilter,panelPomp-method}
\title{Apply a particle filter to \code{panelPomp} objects.}
\usage{
\S4method{pfilter}{panelPomp}(object, shared, specific, Np,
  verbose = getOption("verbose"), ...)
}
\arguments{
\item{object}{A \code{panelPomp} object.}

\item{shared}{A named \code{numeric vector}}

\item{specific}{A \code{matrix} with parameters on named rows and panel units on named columns
more than one column}

\item{Np}{
    the number of particles to use in filtering.
    This may be specified as a single positive integer, in which case the same number of particles will be used at each timestep.
    Alternatively, if one wishes the number of particles to vary across timestep, one may specify \code{Np} either as a vector of positive integers (of length \code{length(time(object))}) or as a function taking a positive integer argument.
    In the latter case, \code{Np(n)} must be a single positive integer, representing the number of particles to be used at the \code{n}-th timestep:
    \code{Np(1)} is the number of particles to use going from \code{timezero(object)} to \code{time(object)[1]},
    \code{Np(2)}, from \code{time(object)[1]} to \code{time(object)[2]},
    and so on.
    \strong{Note that this behavior differs from that of \code{\link{mif}}!}
  }

\item{verbose}{
    logical; if TRUE, print progress reports.
  }

\item{...}{A \code{ptol} argument with unit-specific tolerances can be passed as a named numeric vector with names matching \code{names(unitobjects(object))}.}
}
\description{
S4 method.
}
\details{
S4 method.
}

