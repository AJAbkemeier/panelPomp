> ## basic usage:
> library(panelPomp,quietly=TRUE)
> TESTS_PASS <- NULL 
> ## alternatively: assign(eval(formals(test))$all,NULL) (after defining test)
> ## define test function, ...
> test <- function(expr1,expr2,all="TESTS_PASS",env=parent.frame(),...) 
+   panelPomp:::test(expr1,expr2,all=all,env=env,...)
> ## ..., perform tests, and ...
> test(identical(NULL,NULL))
[1] TRUE
> ## check whether all tests passed
> all(get(eval(formals(test))$all))
[1] TRUE
> if (!all(get(eval(formals(test))$all))) stop("Not all tests passed!")
> 
> 
> ## refresh <- expression({
> ##   rm(list=ls()[!(ls() %in% c('test','TESTS_PASS','refresh'))])
> ##   refreshed <- NULL
> ## })
> ## eval(refresh)
> 
> 
> ## complete tests for 'test':
> ## test if results are added to 'all'
> test(NULL,NULL)
[1] TRUE
> test(length(get(eval(formals(test))$all))==2)
[1] TRUE
> test(length(get(eval(formals(test))$all)),3L)
[1] TRUE
> ## test order of expr1 and expr2
> test(4L,length(get(eval(formals(test))$all)))
[1] TRUE
> ## test stop for wrong parameters
> test(wQuotes("Error : in ''test'': object 'invalid_expr' not found\n"),
+      test(invalid_expr))
[1] TRUE
> test(wQuotes("Error : in ''test'': non-logical test result!\n"),test(NULL))
[1] TRUE
> test(wQuotes("Error : in ''test'': missing vector to accumulate logical test ",
+              "results.\n"),
+      panelPomp:::test(identical(NULL,NULL),all="wrong_all",env=parent.frame()))
[1] TRUE
> test("Error in exists(all, envir = env) : invalid 'envir' argument\n",
+      panelPomp:::test(
+        identical(NULL,NULL),all=eval(formals(test))$all,env="no_env"))
[1] TRUE
> ## test identical for range of objects
> test(NA,NA)
[1] TRUE
> test(1,1)
[1] TRUE
> test(1L,1L)
[1] TRUE
> test("a","a")
[1] TRUE
> test(matrix(1,nrow=2) -> m,m)
[1] TRUE
> test(list(a="a",b="b") -> l,l)
[1] TRUE
> test(c(TRUE,TRUE) -> L,L)
[1] TRUE
> test(wQuotes("Error : in ''test'': object 'not_found' not found\n"),test(not_found))
[1] TRUE
> ## tests for .onAttach
> test(tail(strsplit(options("pomp.examples")$pomp.examples[2],"/")[[1]],2),
+      c("panelPomp","examples"))
[1] TRUE
> ## tests for .onDetach
> detach("package:panelPomp",unload=TRUE)
> is.na(options("pomp.examples")$pomp.examples[2])
[1] TRUE
> 
> ## final check: do all tests pass?
> all(get(eval(formals(test))$all))
[1] TRUE
> if (!all(get(eval(formals(test))$all))) stop("Not all tests passed!")
> 
