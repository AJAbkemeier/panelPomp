
R version 3.4.3 (2017-11-30) -- "Kite-Eating Tree"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## basic usage:
> library(panelPomp,quietly=TRUE)
> TESTS_PASS <- NULL 
> ## alternatively: assign(eval(formals(test))$all,NULL) (after defining test)
> ## define test function, ...
> test <- function(expr1,expr2,all="TESTS_PASS",env=parent.frame(),...) 
+   panelPomp:::test(expr1,expr2,all=all,env=env,...)
> ## ..., perform tests, and ...
> test(NULL,NULL)
[1] TRUE
> ## check whether all tests passed
> all(get(eval(formals(test))$all))
[1] TRUE
> if (!all(get(eval(formals(test))$all))) stop("Not all tests passed!")
> 
> ## complete tests for 'test':
> ## test if results are added to 'all'
> test(NULL,NULL)
[1] TRUE
> ## if only one argument, try(,silent=T)[1] 
> ## (not necessarily logical; hence, all is not changed!)
> test(length(get(eval(formals(test))$all))==2)
[1] TRUE
> test(length(get(eval(formals(test))$all)),2L)
[1] TRUE
> ## test order of expr1 and expr2
> test(3L,length(get(eval(formals(test))$all)))
[1] TRUE
> ## test stop for wrong parameters
> test(wQuotes("Error in try(expr1, silent = TRUE) : object 'invalid_expr' not ",
+              "found\n"),test(invalid_expr))
[1] TRUE
> test(wQuotes("Error : in ''test'': missing vector to accumulate logical test ",
+              "results.\n"),
+      panelPomp:::test(NULL,expr2=NULL,all="wrong_all",env=parent.frame()))
[1] TRUE
> test("Error in exists(all, envir = env) : invalid 'envir' argument\n",
+      panelPomp:::test(NULL,NULL,all=eval(formals(test))$all,env="no_env"))
[1] TRUE
> ## test identical for range of objects
> test(NA,NA)
[1] TRUE
> test(1,1)
[1] TRUE
> test(1L,1L)
[1] TRUE
> test("a","a")
[1] TRUE
> test(matrix(1,nrow=2),matrix(1,nrow=2))
[1] TRUE
> test(list(a="a",b="b"),list(a="a",b="b"))
[1] TRUE
> test(c(TRUE,TRUE),c(TRUE,TRUE))
[1] TRUE
> 
> ## test runif.EstimationScale
> test(class(panelPomp:::runif.EstimationScale(centers=c(th=1),widths=2))[1],
+      "numeric")
[1] TRUE
> 
> ## check for ' in different positions in the character
> test(wQuotes("''Error''")==paste0(sQuote("Error")))
[1] TRUE
> test(wQuotes("Error")=="Error")
[1] TRUE
> test(wQuotes("''Error'' : in")==paste0(sQuote("Error")," : in"))
[1] TRUE
> test(wQuotes("Error : in ''fn''")==paste0("Error : in ",sQuote("fn")))
[1] TRUE
> test(wQuotes("''Error'' : in ''fn'': ''object'' is a required argument"),
+      paste0(sQuote("Error")," : in ",sQuote("fn"),": ",sQuote("object"),
+             " is a required argument"))
[1] TRUE
> test(wQuotes("Error : in ''fn'': ''object'' is a required argument"),
+      paste0("Error : in ",sQuote("fn"),": ",sQuote("object"),
+             " is a required argument"))
[1] TRUE
> test(wQuotes("in ''fn''",": ''object'' is"," a required argument"," Error : in",
+              " ''fn'': ''object'' is a required argument"),
+      paste0("in ",sQuote("fn"),": ",sQuote("object")," is a required argument",
+             " Error : in ",sQuote("fn"),": ",sQuote("object"),
+             " is a required argument"))
[1] TRUE
> ## test passing sQuotes as first argument to stop
> test(as.character(
+   attr(try(stop(wQuotes("in ''fn'': ''object'' is a required argument")),
+            silent=TRUE),"condition")),
+   paste0(
+     "Error in doTryCatch(return(expr), name, parentenv, handler): in ",
+     sQuote("fn"),": ",sQuote("object")," is a required argument\n"))
[1] TRUE
> 
> ## tests for .onAttach
> test(tail(strsplit(options("pomp.examples")$pomp.examples[2],"/")[[1]],2),
+      c("panelPomp","examples"))
[1] TRUE
> 
> ## tests for .onDetach
> detach("package:panelPomp",unload=TRUE)
> is.na(options("pomp.examples")$pomp.examples[2])
[1] TRUE
> 
> ## final check: do all tests pass?
> all(get(eval(formals(test))$all))
[1] TRUE
> if (!all(get(eval(formals(test))$all))) stop("Not all tests passed!")
> 
