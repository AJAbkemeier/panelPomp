
R version 3.4.3 (2017-11-30) -- "Kite-Eating Tree"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(panelPomp)
Loading required package: pomp
> 
> TESTS_PASS <- NULL
> 
> ppo <- pompExample(prw,envir=NULL)[[1]]
> pos <- as(ppo,"list")
> po <- pos[[1]]
> 
> # check reproducibility over a range of randomly chosen seeds
> seeds <- c(21125715L,81902071L,86680005L,29971689L,73376915L)
> for (s in seq_along(seeds)) {
+ set.seed(seeds[s])
+ mf <- mif2(ppo,Np=10,rw.sd=rw.sd(sigmaX=0.05,X.0=0.5),cooling.fraction.50=0.5)
+ print(mf@pParams)
+ print(unitlogLik(mf))
+ print(logLik(mf))
+ }
$shared
   sigmaX    sigmaY 
0.9347312 1.0000000 

$specific
        unit
variable       rw1      rw2
     X.0 0.7497272 1.382096

      rw1       rw2 
-6.233398 -7.337460 
[1] -13.57086
$shared
   sigmaX    sigmaY 
0.6823591 1.0000000 

$specific
        unit
variable      rw1       rw2
     X.0 2.036246 0.7224989

      rw1       rw2 
-6.035492 -9.112446 
[1] -15.14794
$shared
   sigmaX    sigmaY 
0.9306918 1.0000000 

$specific
        unit
variable      rw1      rw2
     X.0 1.138423 1.940188

      rw1       rw2 
-6.598711 -9.563772 
[1] -16.16248
$shared
 sigmaX  sigmaY 
1.02656 1.00000 

$specific
        unit
variable       rw1       rw2
     X.0 0.3563674 0.6888846

      rw1       rw2 
-6.711310 -8.261035 
[1] -14.97235
$shared
  sigmaX   sigmaY 
1.028849 1.000000 

$specific
        unit
variable       rw1      rw2
     X.0 0.4838207 1.954455

      rw1       rw2 
-5.972903 -8.108347 
[1] -14.08125
> TESTS_PASS <- c(
+   TESTS_PASS,# for missing object
+   try(mif2(Np=10,rw.sd=rw.sd(sigmaX=0.05,X.0=0.5),cooling.fraction.50=0.5),
+       silent=TRUE)[1]==sQuotes(
+         "Error : in 'mif2': 'object' is a required argument\n") -> PASSES#?
+ )
> PASSES#?
[1] TRUE
> TESTS_PASS <- c(
+   TESTS_PASS,# for missing Np
+   try(mif2(ppo,rw.sd=rw.sd(sigmaX=0.05,X.0=0.5),cooling.fraction.50=0.5),
+       silent=TRUE)[1]
+   ==
+   sQuotes("Error : in 'panelPomp::mif2': Missing 'Np' argument.\n") -> PASSES#?
+ )
> PASSES#?
[1] TRUE
> TESTS_PASS <- c(
+   TESTS_PASS,# for missing rw.sd
+   try(mif2(ppo,Np=10,cooling.fraction.50=0.5),silent=TRUE)[1]
+   ==
+   sQuotes("Error : in 'panelPomp::mif2': missing 'rw.sd' argument.\n") -> PASSES#?
+ )
> PASSES#?
[1] TRUE
> TESTS_PASS <- c(
+   TESTS_PASS,# for missing object
+   try(mif2(ppo,Np=10,rw.sd=rw.sd(sigmaX=0.05,X.0=0.5)),silent=TRUE)[1]
+   ==
+   sQuotes("Error : in 'panelPomp::mif2': Missing 'cooling.fraction.50'",
+           " argument.\n") -> PASSES#?
+ )
> PASSES#?
[1] TRUE
> 
> stopifnot(all(TESTS_PASS))
> all(TESTS_PASS)#?
[1] TRUE
> 
