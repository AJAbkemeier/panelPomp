
R version 3.4.3 (2017-11-30) -- "Kite-Eating Tree"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(panelPomp,quietly=TRUE)
> 
> TESTS_PASS <- NULL
> test <- function(expr1,expr2,all="TESTS_PASS",env=parent.frame(),...) 
+   panelPomp:::test(expr1,expr2,all=all,env=env,...)
> 
> ppo <- pompExample(prw,envir=NULL)[[1]]
> pos <- as(ppo,"list")
> pPs <- pparams(ppo)
> 
> pog <- pompExample(gompertz,envir=NULL)[[1]]
> all_sh <- c(pPs$sh,get_col(pPs$sp,col=1,rows=seq_along(dim(pPs$sp)[1])))
> pos_noparams <- lapply(unitobjects(ppo),function (pp) pomp(pp,params=numeric(0)))
> 
> ## test checks in validity function for panelPomp class
> 
> ## test checks for missing arguments in panelPomp function
> test(wQuotes("Error : in ''panelPomp'': ''object'' is a required argument.\n"),
+      panelPomp())
[1] TRUE
> test(panelPomp(list(a=1)),
+      wQuotes("Error : in ''panelPomp'': ''object'' must be a either a ",
+              "''panelPomp'' object or a list of ''pomp'' objects.\n"))
[1] TRUE
> test(panelPomp(pos,sh=2*pPs$sh,sp=2*pPs$sp,params=pPs),
+      wQuotes("Error : in ''panelPomp'': do not specify all of ''params'', ",
+              "''shared'' and ''specific''.\n"))
[1] TRUE
> ## test construction of pParams slot ...
> ## ... when is(object,"pompList") ...
> test(panelPomp(pos)@pParams,list(shared=numeric(),specific=sapply(pos,coef)))
[1] TRUE
> test(panelPomp(pos,sh=2*pPs$sh,par=pPs)@pParams$sh,2*pPs$sh)
[1] TRUE
> test(panelPomp(pos,sh=pPs$sh,par=lapply(pPs,`*`,2))@pParams$sp,2*pPs$sp)
[1] TRUE
> test(panelPomp(pos,sp=2*pPs$sp,par=pPs)@pParams$sp,2*pPs$sp)
[1] TRUE
> test(panelPomp(pos,sp=pPs$sp,par=lapply(pPs,`*`,2))@pParams$sh,2*pPs$sh)
[1] TRUE
> test(panelPomp(pos,params=coef(ppo)),ppo)
[1] TRUE
> ## ... and when is(object,"panelPomp")
> test(wQuotes("Error : in ''panelPomp'': if ''shared'' is a character vector ",
+              "(or NULL), unit specific parameters are taken from ''object''.\n"),
+      panelPomp(ppo,sh="sigmaX",params=pPs))
[1] TRUE
> test(panelPomp(ppo,sh="sigmaX")@pParams,
+      list(shared=pPs$sh["sigmaX"],specific=rbind(sigmaY=pPs$sh["sigmaY"],pPs$sp)))
[1] TRUE
> test(panelPomp(ppo,sh=NULL)@pParams,
+      list(shared=numeric(),
+           specific=rbind(sigmaX=pPs$sh["sigmaX"],sigmaY=pPs$sh["sigmaY"],pPs$sp)))
[1] TRUE
> test(panelPomp(ppo,params=coef(ppo)),ppo)
[1] TRUE
> # all parameters shared
> test(pparams(panelPomp(object=unitobjects(ppo),params=all_sh)),
+      list(shared=all_sh,specific=
+             array(numeric(0),dim=c(0,length(pos)),dimnames=list(param=character(0),
+                                                                 unit=names(pos)))
+      ))
[1] TRUE
> # empty params in pompList
> test(panelPomp(pos_noparams),
+      wQuotes("Error : in ''panelPomp'': when parameters come from a list of ",
+              "''pomps,'' all ''pomps'' must have non-empty ''params'' slot\n"))
[1] TRUE
> ## check whether all tests passed
> all(get(eval(formals(test))$all))
[1] TRUE
> if (!all(get(eval(formals(test))$all))) stop("Not all tests passed!")
> 
